'use strict'

function requireCommands () {
  const cmds = {
    // Files (not MFS)
    add: require('ipfs-api/src/files/add'),
    addReadableStream: require('ipfs-api/src/files/add-readable-stream'),
    addPullStream: require('ipfs-api/src/files/add-pull-stream'),
    cat: require('ipfs-api/src/files/cat'),
    catReadableStream: require('ipfs-api/src/files/cat-readable-stream'),
    catPullStream: require('ipfs-api/src/files/cat-pull-stream'),
    get: require('ipfs-api/src/files/get'),
    getReadableStream: require('ipfs-api/src/files/get-readable-stream'),
    getPullStream: require('ipfs-api/src/files/get-pull-stream'),
    ls: require('ipfs-api/src/ls'),
    lsReadableStream: require('ipfs-api/src/ls-readable-stream'),
    lsPullStream: require('ipfs-api/src/ls-pull-stream'),

    bitswap: require('ipfs-api/src/bitswap'),
    block: require('ipfs-api/src/block'),
    bootstrap: require('ipfs-api/src/bootstrap'),
    commands: require('ipfs-api/src/commands'),
    config: require('ipfs-api/src/config'),
    dag: require('ipfs-api/src/dag'),
    dht: require('ipfs-api/src/dht'),
    diag: require('ipfs-api/src/diag'),
    id: require('ipfs-api/src/id'),
    key: require('ipfs-api/src/key'),
    log: require('ipfs-api/src/log'),
    mount: require('ipfs-api/src/mount'),
    name: require('ipfs-api/src/name'),
    object: require('ipfs-api/src/object'),
    pin: require('ipfs-api/src/pin'),
    ping: require('ipfs-api/src/ping'),
    pingReadableStream: require('ipfs-api/src/ping-readable-stream'),
    pingPullStream: require('ipfs-api/src/ping-pull-stream'),
    refs: require('ipfs-api/src/refs'),
    repo: require('ipfs-api/src/repo'),
    stop: require('ipfs-api/src/stop'),
    stats: require('ipfs-api/src/stats'),
    swarm: require('ipfs-api/src/swarm'),
    pubsub: require('ipfs-api/src/pubsub'),
    update: require('ipfs-api/src/update'),
    version: require('ipfs-api/src/version'),
    types: require('ipfs-api/src/types'),
    resolve: require('ipfs-api/src/resolve'),
    dns: require('ipfs-api/src/dns')
  }

  // shutdown is an alias for stop
  cmds.shutdown = cmds.stop

  // TODO: crowding the 'files' namespace temporarily for interface-ipfs-core
  // compatibility, until 'files vs mfs' naming decision is resolved.
  cmds.files = function (send) {
    const files = require('ipfs-api/src/files')(send)

    return files
  }

  cmds.util = function (send, config) {
    const util = {
      addFromFs: require('ipfs-api/src/util/fs-add')(send),
      addFromStream: require('ipfs-api/src/files/add')(send),
      addFromURL: require('ipfs-api/src/util/url-add')(send),
      getEndpointConfig: require('ipfs-api/src/util/get-endpoint-config')(config),
      crypto: require('libp2p-crypto'),
      isIPFS: require('is-ipfs')
    }
    return util
  }

  return cmds
}

function loadCommands (send, config) {
  const files = requireCommands()
  const cmds = {}

  Object.keys(files).forEach((file) => {
    cmds[file] = files[file](send, config)
  })

  return cmds
}

module.exports = loadCommands
